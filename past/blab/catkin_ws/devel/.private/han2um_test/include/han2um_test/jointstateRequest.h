// Generated by gencpp from file han2um_test/jointstateRequest.msg
// DO NOT EDIT!


#ifndef HAN2UM_TEST_MESSAGE_JOINTSTATEREQUEST_H
#define HAN2UM_TEST_MESSAGE_JOINTSTATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace han2um_test
{
template <class ContainerAllocator>
struct jointstateRequest_
{
  typedef jointstateRequest_<ContainerAllocator> Type;

  jointstateRequest_()
    : get(false)  {
    }
  jointstateRequest_(const ContainerAllocator& _alloc)
    : get(false)  {
  (void)_alloc;
    }



   typedef uint8_t _get_type;
  _get_type get;





  typedef boost::shared_ptr< ::han2um_test::jointstateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::han2um_test::jointstateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct jointstateRequest_

typedef ::han2um_test::jointstateRequest_<std::allocator<void> > jointstateRequest;

typedef boost::shared_ptr< ::han2um_test::jointstateRequest > jointstateRequestPtr;
typedef boost::shared_ptr< ::han2um_test::jointstateRequest const> jointstateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::han2um_test::jointstateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::han2um_test::jointstateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::han2um_test::jointstateRequest_<ContainerAllocator1> & lhs, const ::han2um_test::jointstateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.get == rhs.get;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::han2um_test::jointstateRequest_<ContainerAllocator1> & lhs, const ::han2um_test::jointstateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace han2um_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::han2um_test::jointstateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::han2um_test::jointstateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::han2um_test::jointstateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::han2um_test::jointstateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::han2um_test::jointstateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::han2um_test::jointstateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::han2um_test::jointstateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09f518c966a327b7b44a7e1645859313";
  }

  static const char* value(const ::han2um_test::jointstateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09f518c966a327b7ULL;
  static const uint64_t static_value2 = 0xb44a7e1645859313ULL;
};

template<class ContainerAllocator>
struct DataType< ::han2um_test::jointstateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "han2um_test/jointstateRequest";
  }

  static const char* value(const ::han2um_test::jointstateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::han2um_test::jointstateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool get\n"
;
  }

  static const char* value(const ::han2um_test::jointstateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::han2um_test::jointstateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.get);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jointstateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::han2um_test::jointstateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::han2um_test::jointstateRequest_<ContainerAllocator>& v)
  {
    s << indent << "get: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.get);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAN2UM_TEST_MESSAGE_JOINTSTATEREQUEST_H
