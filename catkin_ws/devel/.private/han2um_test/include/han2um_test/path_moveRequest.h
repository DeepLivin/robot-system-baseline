// Generated by gencpp from file han2um_test/path_moveRequest.msg
// DO NOT EDIT!


#ifndef HAN2UM_TEST_MESSAGE_PATH_MOVEREQUEST_H
#define HAN2UM_TEST_MESSAGE_PATH_MOVEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace han2um_test
{
template <class ContainerAllocator>
struct path_moveRequest_
{
  typedef path_moveRequest_<ContainerAllocator> Type;

  path_moveRequest_()
    : fpos_x(0.0)
    , fpos_y(0.0)
    , fpos_z(0.0)  {
    }
  path_moveRequest_(const ContainerAllocator& _alloc)
    : fpos_x(0.0)
    , fpos_y(0.0)
    , fpos_z(0.0)  {
  (void)_alloc;
    }



   typedef double _fpos_x_type;
  _fpos_x_type fpos_x;

   typedef double _fpos_y_type;
  _fpos_y_type fpos_y;

   typedef double _fpos_z_type;
  _fpos_z_type fpos_z;





  typedef boost::shared_ptr< ::han2um_test::path_moveRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::han2um_test::path_moveRequest_<ContainerAllocator> const> ConstPtr;

}; // struct path_moveRequest_

typedef ::han2um_test::path_moveRequest_<std::allocator<void> > path_moveRequest;

typedef boost::shared_ptr< ::han2um_test::path_moveRequest > path_moveRequestPtr;
typedef boost::shared_ptr< ::han2um_test::path_moveRequest const> path_moveRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::han2um_test::path_moveRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::han2um_test::path_moveRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::han2um_test::path_moveRequest_<ContainerAllocator1> & lhs, const ::han2um_test::path_moveRequest_<ContainerAllocator2> & rhs)
{
  return lhs.fpos_x == rhs.fpos_x &&
    lhs.fpos_y == rhs.fpos_y &&
    lhs.fpos_z == rhs.fpos_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::han2um_test::path_moveRequest_<ContainerAllocator1> & lhs, const ::han2um_test::path_moveRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace han2um_test

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::han2um_test::path_moveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::han2um_test::path_moveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::han2um_test::path_moveRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::han2um_test::path_moveRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::han2um_test::path_moveRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::han2um_test::path_moveRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::han2um_test::path_moveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "046452153b651bcb11a63b8f50f696ed";
  }

  static const char* value(const ::han2um_test::path_moveRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x046452153b651bcbULL;
  static const uint64_t static_value2 = 0x11a63b8f50f696edULL;
};

template<class ContainerAllocator>
struct DataType< ::han2um_test::path_moveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "han2um_test/path_moveRequest";
  }

  static const char* value(const ::han2um_test::path_moveRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::han2um_test::path_moveRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 fpos_x\n"
"float64 fpos_y\n"
"float64 fpos_z\n"
;
  }

  static const char* value(const ::han2um_test::path_moveRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::han2um_test::path_moveRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fpos_x);
      stream.next(m.fpos_y);
      stream.next(m.fpos_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct path_moveRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::han2um_test::path_moveRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::han2um_test::path_moveRequest_<ContainerAllocator>& v)
  {
    s << indent << "fpos_x: ";
    Printer<double>::stream(s, indent + "  ", v.fpos_x);
    s << indent << "fpos_y: ";
    Printer<double>::stream(s, indent + "  ", v.fpos_y);
    s << indent << "fpos_z: ";
    Printer<double>::stream(s, indent + "  ", v.fpos_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAN2UM_TEST_MESSAGE_PATH_MOVEREQUEST_H
